package Level1;

public class Main {
}

/*
Task1
Поиск идентификатора объектов в памяти*/

/*
Task2
Определение загрузчиков классов*/

/*
Task3
Работа с объектами Class */

/*
Task4
Управление банковским счетом
Создай класс BankAccount с полями accountNumber, balance, методами deposit(), withdraw(), getBalance().
Реализуйте проверку на отрицательный баланс при снятии денег (бросьте IllegalArgumentException).*/

/*
Task5
Фильтрация списка
Дан список строк: ["apple", "banana", "cherry", "date", "fig"].
Напиши метод, который возвращает строки длиннее 5 символов, используя цикл и ArrayList.
Цель: Работа с коллекциями, условиями.*/

/*
Task6
Пользовательское исключение
Создай InsufficientFundsException (наследуй от Exception).
Модифицируй BankAccount.withdraw(), чтобы оно бросало это исключение при нехватке средств.
Цель: Кастомные исключения.*/


/*
Task7___
Разработайте программу для управления банковскими счетами с поддержкой следующих функций:
1. Создание счетов
У каждого счета есть:
уникальный номер (генерируется автоматически, начиная с 1000)
текущий баланс (не может быть отрицательным)
При создании счета баланс может быть нулевым или положительным.
2. Операции
deposit(номер_счета, сумма) — пополнение счета.
withdraw(номер_счета, сумма) — снятие средств.
transfer(счет_отправителя, счет_получателя, сумма) — перевод между счетами.
3. Требования
Все операции должны обрабатывать следующие ошибки:
Отрицательная сумма операций.
Недостаточно средств при снятии/переводе.
Счет не найден.
4. Используйте кастомные исключения:
NegativeAmountException
InsufficientFundsException
AccountNotFoundException
5. Дополнительные функции
Получение списка всех счетов.
Поиск счетов с балансом выше указанного значения.
Логирование всех операций в формате:
[Дата] Операция: [тип], Счет: [номер], Сумма: [значение], Статус: [успех/ошибка]*/


/*
Task7_1
Разработайте программу для управления библиотекой с поддержкой следующих функций:
Учет книг
- Каждая книга имеет:
Уникальный ISBN (генерируется автоматически, начиная с 10000)
Название
Автор
Статус (доступна/выдана)
- Учет пользователей
Каждый пользователь имеет:
Уникальный ID (генерируется автоматически, начиная с 500)
Имя
Список взятых книг (максимум 5)
- Операции
addBook(название, автор) — добавление книги в каталог.
registerUser(имя) — регистрация пользователя.
borrowBook(userId, isbn) — выдача книги пользователю.
returnBook(userId, isbn) — возврат книги.
Требования
- Обработка ошибок:
Попытка взять недоступную книгу.
Превышение лимита книг у пользователя.
Несуществующий пользователь или книга.
- Кастомные исключения:
BookNotAvailableException
UserLimitExceededException
EntityNotFoundException
- Дополнительные функции
Поиск всех книг по автору.
Получение списка пользователей с превышением лимита книг.
Логирование операций в формате:
[Дата] [Тип_операции] Пользователь: [ID], Книга: [ISBN], Статус: [успех/ошибка]*/



/*
TaskOOP2
1. Базовая задача – Учёт товаров в магазине (уровень новичка)
Цель: Понять, как хранить данные об объектах, их свойствах и простых операциях (добавление, удаление).
Условие:
Создай систему учёта товаров в магазине. У каждого товара есть:
•	Название
•	Цена
•	Количество на складе
Функционал:
1.	Добавить новый товар.
2.	Обновить количество товара.
3.	Вывести список всех товаров с ценами и количеством.*/

/*
TaskOOP3
2. Учет заказов в аптеке (уровень проще среднего)
Цель: Понять взаимодействие двух объектов, работу с коллекциями и статусами.
Условие:
Создай систему учёта заказов в аптеке. Есть два класса:
•	Medicine (лекарство) с названием, ценой и количеством.
•	Order (заказ), который содержит список купленных лекарств и статус (“Новый”, “Оплачен”, “Выдан”).
Функционал:
1.	Добавить заказ с нужными лекарствами.
2.	Оплатить заказ.
3.	Выдать заказ клиенту.
Подсказка:
•	Используй ArrayList<Medicine> внутри Order.
•	Добавь enum OrderStatus { NEW, PAID, DELIVERED } для статусов.
•	В классе Pharmacy храни заказы (List<Order>).*/

/*
TaskOOP4
ЗАДАЧА 3: Учет заказов в кафе (уровень проще среднего)
Условие:
Создай систему учета заказов в кафе.
Есть два класса:
•	MenuItem (позиция в меню) с названием и ценой.
•	Order (заказ), который содержит список заказанных блюд и статус (Новый, Оплачен, Готов).
Функционал:
1.	Создать заказ и добавить в него блюда.
2.	Оплатить заказ.
3.	Отметить заказ как готовый.
Подсказки:
•	Используй ArrayList<MenuItem> внутри Order.
•	Для статусов используй enum OrderStatus { NEW, PAID, READY }.
•	Сделай класс Cafe, где будут храниться заказы (List<Order>).*/


/*
TaskOOP5
3. Бронирование столиков в кафе (уровень средний)
Цель: Добавить логику проверки доступности и более сложные взаимосвязи объектов.
Условие:
Создай систему бронирования столиков в кафе.
Есть три класса:
•	Table (Столик) – номер, количество мест, доступность (свободен/занят).
•	Reservation (Бронь) – имя клиента, количество гостей, столик, статус (“Ожидает”, “Подтверждено”, “Отменено”).
•	Cafe – управляет бронированиями.
Функционал:
1.	Забронировать столик.
2.	Подтвердить бронь.
3.	Отменить бронь.
4.	Вывести список всех бронирований.
Подсказка:
•	Используй List<Table> для хранения столиков.
•	Используй List<Reservation> для хранения броней.
•	В методе бронирования проверяй, есть ли свободный столик нужного размера.*/

/*TaskOOP6!!!
4. Управление прокатом велосипедов (уровень выше среднего)
Цель: Понять, как организовать аренду объектов с учетом состояний.
Условие:
Создай систему проката велосипедов.
Есть три класса:
•	Bike (Велосипед) – уникальный ID, марка, статус (“Свободен”, “В аренде”).
•	Customer (Клиент) – имя, ID клиента.
•	Rental (Аренда) – клиент, велосипед, дата начала, статус (“Активен”, “Завершен”).
Функционал:
1.	Клиент берет велосипед в аренду.
2.	Возвращает велосипед.
3.	Просмотреть список доступных велосипедов.
4.	Просмотреть активные аренды.
Подсказка:
•	Храни List<Bike> в классе BikeRentalService.
•	Аренда возможна только если велосипед свободен.*/

/*TaskOOP7
2. Управление прокатом автомобилей
Цель: Улучшить навыки управления статусами объектов и работой с клиентами.
Условие:
Создай систему аренды автомобилей.
Классы:
•	Car (Автомобиль) – id, марка, статус (Свободен, В аренде).
•	Customer (Клиент) – имя, ID клиента, возраст (аренда возможна только с 18 лет).
•	Rental (Аренда) – клиент, авто, дата начала, статус (Активен, Завершен).
•	CarRentalService (Сервис управления прокатом) – управление арендой машин.
Функционал:
1.	Выдать машину клиенту (если ему 18+ лет и машина свободна).
2.	Вернуть машину.
3.	Посмотреть список свободных машин.
4.	Посмотреть активные аренды.*/

/*TaskOOP8
Система бронирования столиков в ресторане
Цель: Отработать управление бронированием с таймером.
Классы:
•	Table (номер, количество мест, статус: Свободен, Забронирован).
•	Customer (Имя, телефон).
•	Reservation (стол, клиент, дата и время, статус).
•	RestaurantBookingService (управление бронированием).
Функционал:
1.	Забронировать столик на конкретное время.
2.	Автоматически снимать бронь, если клиент не пришёл в течение 15 минут.
3.	Показать свободные столики.
4.	Вывести список активных бронирований.
Чем сложнее?
•	Нужно реализовать систему автоматического удаления броней через таймер.*/













/*
TaskOOP7
Задача 2: Банк и счета
Цель: Практика абстрактных классов и инкапсуляции.
Требования:
1.	Создай абстрактный класс BankAccount с полями:
•	accountNumber, balance, ownerName.
•	Метод deposit(double amount).
•	Абстрактный метод withdraw(double amount).
2.	Создай классы:
•	SavingsAccount (с ограничением на снятие).
•	CheckingAccount (без ограничений).
3.	Добавь валидацию:
•	Нельзя снимать больше баланса.*/

/*
TaskOOP8
Задача 3: Магазин и корзина товаров
Цель: Проработать композицию, наследование и исключения.
Требования:
1.	Создай классы:
•	Product (название, цена, количество на складе).
•	Cart (список Product).
•	Customer (имя, корзина).
2.	Добавь методы:
•	addProduct(Product product, int quantity).
•	checkout(), который уменьшает количество товара на складе.
3.	Обработай исключения:
•	OutOfStockException, если товара не хватает.*/

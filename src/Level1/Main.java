package Level1;

public class Main {
}

/*
Task1
Поиск идентификатора объектов в памяти*/

/*
Task2
Определение загрузчиков классов*/

/*
Task3
Работа с объектами Class */

/*
TaskOOP2
1. Базовая задача – Учёт товаров в магазине (уровень новичка)
Цель: Понять, как хранить данные об объектах, их свойствах и простых операциях (добавление, удаление).
Условие:
Создай систему учёта товаров в магазине. У каждого товара есть:
•	Название
•	Цена
•	Количество на складе
Функционал:
1.	Добавить новый товар.
2.	Обновить количество товара.
3.	Вывести список всех товаров с ценами и количеством.*/

/*
TaskOOP3
2. Учет заказов в аптеке (уровень проще среднего)
Цель: Понять взаимодействие двух объектов, работу с коллекциями и статусами.
Условие:
Создай систему учёта заказов в аптеке. Есть два класса:
•	Medicine (лекарство) с названием, ценой и количеством.
•	Order (заказ), который содержит список купленных лекарств и статус (“Новый”, “Оплачен”, “Выдан”).
Функционал:
1.	Добавить заказ с нужными лекарствами.
2.	Оплатить заказ.
3.	Выдать заказ клиенту.
Подсказка:
•	Используй ArrayList<Medicine> внутри Order.
•	Добавь enum OrderStatus { NEW, PAID, DELIVERED } для статусов.
•	В классе Pharmacy храни заказы (List<Order>).*/

/*
TaskOOP4
ЗАДАЧА 3: Учет заказов в кафе (уровень проще среднего)
Условие:
Создай систему учета заказов в кафе.
Есть два класса:
•	MenuItem (позиция в меню) с названием и ценой.
•	Order (заказ), который содержит список заказанных блюд и статус (Новый, Оплачен, Готов).
Функционал:
1.	Создать заказ и добавить в него блюда.
2.	Оплатить заказ.
3.	Отметить заказ как готовый.
Подсказки:
•	Используй ArrayList<MenuItem> внутри Order.
•	Для статусов используй enum OrderStatus { NEW, PAID, READY }.
•	Сделай класс Cafe, где будут храниться заказы (List<Order>).*/


/*
TaskOOP5
3. Бронирование столиков в кафе (уровень средний)
Цель: Добавить логику проверки доступности и более сложные взаимосвязи объектов.
Условие:
Создай систему бронирования столиков в кафе.
Есть три класса:
•	Table (Столик) – номер, количество мест, доступность (свободен/занят).
•	Reservation (Бронь) – имя клиента, количество гостей, столик, статус (“Ожидает”, “Подтверждено”, “Отменено”).
•	Cafe – управляет бронированиями.
Функционал:
1.	Забронировать столик.
2.	Подтвердить бронь.
3.	Отменить бронь.
4.	Вывести список всех бронирований.
Подсказка:
•	Используй List<Table> для хранения столиков.
•	Используй List<Reservation> для хранения броней.
•	В методе бронирования проверяй, есть ли свободный столик нужного размера.*/

/*TaskOOP6!!!
4. Управление прокатом велосипедов (уровень выше среднего)
Цель: Понять, как организовать аренду объектов с учетом состояний.
Условие:
Создай систему проката велосипедов.
Есть три класса:
•	Bike (Велосипед) – уникальный ID, марка, статус (“Свободен”, “В аренде”).
•	Customer (Клиент) – имя, ID клиента.
•	Rental (Аренда) – клиент, велосипед, дата начала, статус (“Активен”, “Завершен”).
Функционал:
1.	Клиент берет велосипед в аренду.
2.	Возвращает велосипед.
3.	Просмотреть список доступных велосипедов.
4.	Просмотреть активные аренды.
Подсказка:
•	Храни List<Bike> в классе BikeRentalService.
•	Аренда возможна только если велосипед свободен.*/

/*
TaskOOP7
Задача 2: Банк и счета
Цель: Практика абстрактных классов и инкапсуляции.
Требования:
1.	Создай абстрактный класс BankAccount с полями:
•	accountNumber, balance, ownerName.
•	Метод deposit(double amount).
•	Абстрактный метод withdraw(double amount).
2.	Создай классы:
•	SavingsAccount (с ограничением на снятие).
•	CheckingAccount (без ограничений).
3.	Добавь валидацию:
•	Нельзя снимать больше баланса.*/

/*
TaskOOP8
Задача 3: Магазин и корзина товаров
Цель: Проработать композицию, наследование и исключения.
Требования:
1.	Создай классы:
•	Product (название, цена, количество на складе).
•	Cart (список Product).
•	Customer (имя, корзина).
2.	Добавь методы:
•	addProduct(Product product, int quantity).
•	checkout(), который уменьшает количество товара на складе.
3.	Обработай исключения:
•	OutOfStockException, если товара не хватает.*/
